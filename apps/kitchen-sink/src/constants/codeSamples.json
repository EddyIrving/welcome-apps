{"OpenItemCard":{"componentName":"OpenItemCard","sourceFile":"../examples/OpenItemCard/OpenItemCard.jsx","codeSample":"\nimport { useBoardContext } from \"../../hooks/UseBoardContext.js\";\n\nconst monday = mondaySdk();\n\nconst OpenItemCard = () => {\n  const boardContext = useBoardContext()\n  const { items } = boardContext.state;\n  return (\n    <div className=\"open-item-card-container feature-container\">\n      <RenderItems\n        itemsData={items}\n        actionButtonContent=\"Open Card\"\n        action={(item) => {\n          monday.execute(\"openItemCard\", { itemId: item.id });\n        }}\n      />\n    </div>\n  );\n};"},"Confirmation":{"componentName":"Confirmation","sourceFile":"../examples/Confirmation/Confirmation.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst Confirmation = () => {\n  const [confirmed, setConfirmed] = useState(false);\n  const [showMessage, setShowMessage] = useState(0);\n\n  const handleConfirmation = () => {\n    monday\n      .execute(\"confirm\", {\n        message: \"Random question?\",\n        confirmButton: \"Let's go!\",\n        cancelButton: \"No way\",\n        excludeCancelButton: false,\n      })\n      .then((res) => {\n        console.log(res.data)\n        setConfirmed(res.data.confirm);\n        setShowMessage(1);\n        setTimeout(() => {\n          setShowMessage(0);\n        }, 2000);\n      });\n  };\n\n  return (\n    <div className=\"confirmation-container feature-container\">\n        {showMessage === 0 && <Button style={{ width: \"30%\", margin: \"30px 0\" }} onClick={handleConfirmation}>\n          Click Me\n        </Button>}\n        {showMessage !== 0 && confirmed && <AttentionBox type=\"success\" text=\"Confirmed\" title=\"Lets go!\" />}\n        {showMessage !== 0 && !confirmed && <AttentionBox type=\"danger\" text=\"Denied\" title=\"No way\" />}\n      </div>\n    </div>\n  );\n};"},"Notice":{"componentName":"Notice","sourceFile":"../examples/Notice/Notice.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst Notice = () => {\n  const handleNotice = (type, text) => {\n    monday.execute(\"notice\", {\n      message: `${text} message`,\n      type: type,\n      timeout: 3000,\n    });\n  };\n\n  return (\n    <div className=\"notice-container feature-container\">\n      <div className=\"notice-content working-with-the-board-items\">\n        {noticeConstants.notices.map(({ type, text, color }) => (\n          <Button color={color} onClick={() => handleNotice(type, text)}>\n            {text} Notice\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};"},"OpenSettingsPane":{"componentName":"OpenSettingsPane","sourceFile":"../examples/OpenSettingsPane/OpenSettingsPane.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst OpenSettingsPane = () => {\n    const [isPaneOpen, setIsPaneOpen] = useState(false);\n\n  const handleOpenSettings = (type, text) => {\n    monday.execute(\"openSettings\")\n    setIsPaneOpen(true);\n  };\n  const handleCloseSettings = (type, text) => {\n    monday.execute(\"closeSettings\")\n    setIsPaneOpen(false);\n  };\n\n  return (\n    <div className=\"open-settings-container feature-container\">\n      <div className=\"open-settings working-with-the-board-items\">\n          {!isPaneOpen ? <Button onClick={handleOpenSettings}>\n            Open settings pane\n          </Button>\n          : <Button onClick={handleCloseSettings}>\n          Close settings pane\n            </Button>}\n      </div>\n    </div>\n  );\n};"},"FilePreview":{"componentName":"FilePreview","sourceFile":"../examples/FilePreview/FilePreview.jsx","codeSample":"\nconst FilePreviewSample = () => {\n  // eslint-disable-next-line no-unused-vars\n  const [isLoading, setIsLoading] = useState(true);\n  const boardData = useGetBoardData();\n  const [fileColumns, setFileColumns] = useState([]);\n\n  useEffect(() => {\n    if (boardData.boards) {\n      setIsLoading(false);\n      setFileColumns(\n        boardData.boards[0].columns.filter((x) => x.type === \"file\")\n      );\n    }\n  }, [boardData]);\n\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader size={16} />\n      ) : fileColumns.length > 0 ? (\n        <RenderItems\n          itemsData={boardData.boards[0].items_page.items}\n          actionButtonContent=\"Add or preview File\"\n          action={(item) => {\n            const fileColumnId = fileColumns[0].id;\n            const fileColumnValue = JSON.parse(\n              item.column_values.filter((x) => x.id === fileColumns[0].id)[0]\n                .value\n            );\n            const assetId = fileColumnValue?.files[0]?.assetId ?? null;\n            const boardId = boardData.boards[0].id;\n            console.log({ item, assetId, fileColumnId });\n            if (!assetId) {\n              monday.execute(\"notice\", {\n                message: \"No files uploaded. Uploading now...\",\n              });\n              monday.execute(\"triggerFilesUpload\", {\n                boardId,\n                itemId: item.id,\n                columnId: fileColumnId,\n              });\n            } else {\n              monday.execute(\"openFilesDialog\", {\n                boardId,\n                itemId: item.id,\n                columnId: fileColumnId,\n                assetId,\n              });\n            }\n          }}\n        />\n      ) : (\n        <Button onClick={handleAddFileColumn}>Add file column</Button>\n      )}\n    </div>\n  );\n};"}}