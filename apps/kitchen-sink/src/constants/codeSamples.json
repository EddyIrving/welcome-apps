{"OpenItemCard":{"componentName":"OpenItemCard","sourceFile":"../../examples/OpenItemCard/OpenItemCard.jsx","codeSample":"\nimport { useBoardContext } from \"../../hooks/UseBoardContext.js\";\n\nconst monday = mondaySdk();\n\nconst OpenItemCard = () => {\n  const boardContext = useBoardContext()\n  const { items } = boardContext.state;\n  return (\n    <div className=\"open-item-card-container feature-container\">\n      <RenderItems\n        itemsData={items}\n        actionButtonContent=\"Open Card\"\n        action={(item) => {\n          monday.execute(\"openItemCard\", { itemId: item.id });\n        }}\n      />\n    </div>\n  );\n};"},"Confirmation":{"componentName":"Confirmation","sourceFile":"../../examples/Confirmation/Confirmation.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst Confirmation = () => {\n  const [confirmed, setConfirmed] = useState(false);\n  const [showMessage, setShowMessage] = useState(0);\n\n  const handleConfirmation = () => {\n    monday\n      .execute(\"confirm\", {\n        message: \"Random question?\",\n        confirmButton: \"Let's go!\",\n        cancelButton: \"No way\",\n        excludeCancelButton: false,\n      })\n      .then((res) => {\n        console.log(res.data)\n        setConfirmed(res.data.confirm);\n        setShowMessage(1);\n        setTimeout(() => {\n          setShowMessage(0);\n        }, 2000);\n      });\n  };\n\n  return (\n    <div className=\"confirmation-container feature-container\">\n        {showMessage === 0 && <Button style={{ width: \"30%\", margin: \"30px 0\" }} onClick={handleConfirmation}>\n          Click Me\n        </Button>}\n        {showMessage !== 0 && confirmed && <AttentionBox type=\"success\" text=\"Confirmed\" title=\"Lets go!\" />}\n        {showMessage !== 0 && !confirmed && <AttentionBox type=\"danger\" text=\"Denied\" title=\"No way\" />}\n      </div>\n    </div>\n  );\n};"},"Notice":{"componentName":"Notice","sourceFile":"../../examples/Notice/Notice.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst Notice = () => {\n  const handleNotice = (type, text) => {\n    monday.execute(\"notice\", {\n      message: `${text} message`,\n      type: type,\n      timeout: 3000,\n    });\n  };\n\n  return (\n    <div className=\"notice-container feature-container\">\n      <div className=\"notice-content working-with-the-board-items\">\n        {noticeConstants.notices.map(({ type, text, color }) => (\n          <Button color={color} onClick={() => handleNotice(type, text)}>\n            {text} Notice\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};"},"OpenSettingsPane":{"componentName":"OpenSettingsPane","sourceFile":"../../examples/OpenSettingsPane/OpenSettingsPane.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst OpenSettingsPane = () => {\n    const [isPaneOpen, setIsPaneOpen] = useState(false);\n\n  const handleOpenSettings = (type, text) => {\n    monday.execute(\"openSettings\")\n    setIsPaneOpen(true);\n  };\n  const handleCloseSettings = (type, text) => {\n    monday.execute(\"closeSettings\")\n    setIsPaneOpen(false);\n  };\n\n  return (\n    <div className=\"open-settings-container feature-container\">\n      <div className=\"open-settings working-with-the-board-items\">\n          {!isPaneOpen ? <Button onClick={handleOpenSettings}>\n            Open settings pane\n          </Button>\n          : <Button onClick={handleCloseSettings}>\n          Close settings pane\n            </Button>}\n      </div>\n    </div>\n  );\n};"},"FilePreview":{"componentName":"FilePreview","sourceFile":"../../examples/FilePreview/FilePreview.jsx","codeSample":"\nconst FilePreviewSample = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const boardData = useGetBoardData();\n  const [fileColumns, setFileColumns] = useState([]);\n\n  useEffect(() => {\n    if (boardData.boards) {\n      setIsLoading(false);\n      setFileColumns(\n        boardData.boards[0].columns.filter((x) => x.type === \"file\")\n      );\n    }\n  }, [boardData]);\n\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader size={16} />\n      ) : fileColumns.length > 0 ? (\n        <RenderItems\n          itemsData={boardData.boards[0].items_page.items}\n          actionButtonContent=\"Add or preview File\"\n          action={(item) => {\n            const fileColumnId = fileColumns[0].id;\n            const fileColumnValue = JSON.parse(\n              item.column_values.filter((x) => x.id === fileColumns[0].id)[0]\n                .value\n            );\n            const assetId = fileColumnValue?.files[0]?.assetId ?? null;\n            const boardId = boardData.boards[0].id;\n            console.log({ item, assetId, fileColumnId });\n            if (!assetId) {\n              monday.execute(\"notice\", {\n                message: \"No files uploaded. Uploading now...\",\n              });\n              monday.execute(\"triggerFilesUpload\", {\n                boardId,\n                itemId: item.id,\n                columnId: fileColumnId,\n              });\n            } else {\n              monday.execute(\"openFilesDialog\", {\n                boardId,\n                itemId: item.id,\n                columnId: fileColumnId,\n                assetId,\n              });\n            }\n          }}\n        />\n      ) : (\n        <Button onClick={handleAddFileColumn}>Add file column</Button>\n      )}\n    </div>\n  );\n};"},"DeleteItem":{"componentName":"DeleteItem","sourceFile":"../../examples/DeleteItem/DeleteItem.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst DeleteItem = () => {\n  const boardContext = useBoardContext();\n  const { items, boardName, updateItems } = boardContext.state;\n\n  const deleteItem = (item) => {\n    monday\n      .api(deleteItemConstants.deleteItemAndGetUpdatedBoardItemsQuery, {\n        variables: { itemId: +item.id },\n      })\n      .then((res) => {\n        updateItems({\n          items: res.data.delete_item.board.items_page.items,\n          boardName,\n          updateItems,\n        });\n      });\n  };\n\n  return (\n    <div className=\"delete-item-container feature-container\">\n      <RenderItems\n        itemsData={items}\n        actionButtonContent=\"Delete me\"\n        action={(item) => {\n          monday\n            .execute(\"confirm\", {\n              message: `Are you sure you want to delete the item ${item.name} (This item will be actually deleted from you board)?`,\n              confirmButton: \"Delete\",\n              cancelButton: \"Cancel\",\n              excludeCancelButton: false,\n            })\n            .then((res) => {\n              res.data.confirm &&\n                monday.execute(\"notice\", {\n                  message: \"Item has been deleted successfully\",\n                  type: \"success\",\n                  timeout: 10000,\n                }) &&\n                deleteItem(item);\n            });\n        }}\n      />\n\n    </div>\n  );\n};"},"StorageApi":{"componentName":"StorageApi","sourceFile":"../../examples/StorageApi/StorageApi.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst StorageApi = () => {\n  const { items } = useBoardContext().state;\n  const [favouriteItems, setFavouriteItems] = useState([]);\n\n  useEffect(() => {\n    monday.storage.instance.getItem(\"FAVOURITE_ITEMS\").then((res) => {\n      if (!res.data?.value || !res.data?.success) {\n        monday.storage.instance.setItem(\"FAVOURITE_ITEMS\", JSON.stringify([]));\n        return;\n      } else {\n        setFavouriteItems(JSON.parse(res.data?.value));\n      }\n    });\n\n    monday.execute(\"notice\", {\n      message: \"Click on the heart icon to mark item as favourite or to remove one\",\n      type: \"info\",\n      timeout: 10000,\n    });\n  }, []);\n\n  const changeItemFavouriteState = (itemId, desiredFavouriteState) => {\n    let updatedFavourites = [...favouriteItems];\n    if (desiredFavouriteState) {\n      if (!favouriteItems.includes(+itemId)) {\n        updatedFavourites.push(+itemId);\n      }\n    } else {\n      updatedFavourites = updatedFavourites.filter((favouriteItemId) => {\n        return favouriteItemId !== +itemId;\n      });\n    }\n    monday.storage.instance.setItem(\"FAVOURITE_ITEMS\", JSON.stringify(updatedFavourites)).then((res) => {\n      if (res.data.success) {\n        setFavouriteItems(updatedFavourites);\n      }\n    });\n  };\n\n  return (\n    <div className=\"storage-api-container feature-container\">\n      <div className=\"working-with-the-board-items playground\">\n        <h3 className=\"playground-header\">Playground</h3>\n        {items.map((item) => {\n          const isFavourite = favouriteItems.includes(+item.id);\n          return (\n            <Item\n              key={item.id}\n              item={item}\n              action={() => changeItemFavouriteState(item.id, !isFavourite)}\n              isFavourite={isFavourite}\n              backgroundColor={randomColorGenerator()}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};"},"GetAppContext":{"componentName":"GetAppContext","sourceFile":"../../examples/GetAppContext/GetAppContext.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetAppContext = () => {\n    const [showMessage, setShowMessage] = useState(0);\n    const [contextDataString, setContextDataString] = useState('');\n\n    const handleGetContext = async () => {\n        const appContext = await monday.get('context');\n        setContextDataString(JSON.stringify(appContext?.data, null, 2));\n        setShowMessage(true);\n    }\n\n    return (\n        <div className=\"get-context-container feature-container\">\n                {!showMessage \n                    ? (<Button style={{ width: \"30%\", margin: \"30px 0\" }} onClick={handleGetContext}>\n                    Show app context\n                      </Button>)\n                    : (<CodeBlock contentText={contextDataString} />)}\n            </div>\n        </div>\n    );\n}"},"ListenToEvents":{"componentName":"ListenToEvents","sourceFile":"../../examples/ListenToEvents/ListenToEvents.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst ListenToEvents = () => {\n  const [eventsList, setEventsList] = useState([]);\n  const [mostRecentEvent, setMostRecentEvent] = useState({})\n  const [boardUrl, setBoardUrl] = useState('');\n\n  const handleNewEvent = async (evt) => {\n    monday.execute(\"notice\", {\n      message: `A new event happened! Type: ${evt.data.type}`\n    })\n    setEventsList([...eventsList, evt.data]);\n    setMostRecentEvent(evt.data);\n  }\n\n  const handleContextUpdate = async (context) => {\n    const boardIds = context?.data?.boardIds;\n    const accountInfoQuery = await monday.api(`{ account { slug } }`);\n    const slug = accountInfoQuery?.data?.account?.slug;\n    if (!boardIds || !slug) {\n      setBoardUrl('https://monday.com');\n    }\n    setBoardUrl(`https://${slug}.monday.com/boards/${boardIds[0]}`);\n  }\n\n  useEffect(() => {\n    const eventsListener = monday.listen('events', handleNewEvent);\n    const contextListener = monday.listen('context', handleContextUpdate)\n  })\n\n  return (\n    <div className=\"events-listen-container feature-container\">\n        <TabComponent eventsList={eventsList} mostRecentEvent={mostRecentEvent} url={boardUrl} buttonIsLoading={!boardUrl}/>\n    </div>\n  );\n}"},"ListenToBoardFilter":{"componentName":"ListenToBoardFilter","sourceFile":"../../examples/ListenToBoardFilter/ListenToBoardFilter.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst ListenToBoardFilter = () => {\n  const [eventsList, setEventsList] = useState([]);\n  const [mostRecentEvent, setMostRecentEvent] = useState({})\n  const [filterState, setFilterState] = useState();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleFilterChange = async (evt) => {\n    monday.execute('notice', {\n        message: `Item IDs changed - ${evt.data.length} items to show`\n    })\n    setFilterState(evt);\n  }\n\n  const handleSearchChange = async (evt) => {\n    monday.execute('notice', {\n        message: `Search term changed – ${evt.data.term}`\n    })\n    setSearchTerm(evt);\n  }\n\n  const debouncedHandleSearchChange = _.debounce(handleSearchChange, 500);\n  const debouncedHandleFilterChange = _.debounce(handleFilterChange, 500);\n\n\n  useEffect(() => {\n    const eventsListener = monday.listen('itemIds', debouncedHandleFilterChange);\n    const contextListener = monday.listen('filter', debouncedHandleSearchChange)\n  }, [])\n\n  return (\n    <div className=\"events-listen-container feature-container\">\n        <TabComponent filterState={filterState} searchTerm={searchTerm}/>\n    </div>\n  );\n}"},"GetBoardItems":{"componentName":"GetBoardItems","sourceFile":"../../examples/GetBoardItems/GetBoardItems.jsx","codeSample":"\nconst monday = mondaySdk();\n\nconst GetBoardItems = () => {\n    const appContext = useAppContext();\n    const [filterState, setFilterState] = useState()\n    const [items, setItems] = useState([])\n    let currentBoard = appContext?.data?.boardIds[0] ?? null;\n    let filterRules = filterState?.data?.rules ?? [];\n\n    const handleFilterChange = async (evt) => {\n        setFilterState(evt);\n    }\n\n    const debouncedHandleFilterChange = _.debounce(handleFilterChange, 500);\n\n    useEffect(() => {\n        const filterListener = monday.listen('filter', debouncedHandleFilterChange)\n    }, [])\n\n    useEffect(() => {\n        if (currentBoard) { // only get items after context has been fetched\n            console.time('get_items')\n            const res = monday.api(`query ($boardId: [ID!], $rules:[ItemsQueryRule!]) {\n                                        boards(ids: $boardId) {\n                                            id\n                                            items_page (query_params: { rules: $rules}) {\n                                                items {\n                                                    id\n                                                    name\n                                                }\n                                            }\n                                        }\n                                    }`,\n                {\n                    variables: {\n                        boardId: currentBoard, \n                        rules: filterRules\n                    }\n                })\n                .then((res) => {\n                    setItems(res.data.boards[0].items_page.items)\n                });\n        }\n    }, [currentBoard, filterRules])\n\n    return (\n        <div className=\"get-items-container feature-container\">\n            <RenderItems\n                itemsData={items}\n            />\n        </div>\n    );\n};"},"UploadFileViaAPI":{"componentName":"UploadFileViaAPI","sourceFile":"../../examples/UploadFileViaAPI/UploadFileViaAPI.jsx","codeSample":"\nconst monday = mondaySdk();\n\nfunction handleAddFileColumn() {\n  // TODO: Add logic to create file column\n  monday.execute('notice', {\n    message: \"No file column found on board, please add one\",\n    type: \"error\",\n  })\n}\n\nconst FileUploadSample = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const boardData = useGetBoardData();\n  const [fileColumns, setFileColumns] = useState([]);\n\n  useEffect(() => {\n    if (boardData.boards) {\n      setIsLoading(false);\n      setFileColumns(\n        boardData.boards[0].columns.filter((x) => x.type === \"file\")\n      );\n    }\n  }, [boardData]);\n\n\n  return (\n    <div>\n      {isLoading ? (\n        <Loader size={16} />\n      ) : fileColumns.length > 0 ? (\n        <RenderItems\n          itemsData={boardData.boards[0].items_page.items}\n          actionButtonContent=\"Add or preview File\"\n          action={(item) => {\n            const fileColumnId = fileColumns[0].id;\n            const itemId = item.id;\n            const boardId = boardData.boards[0].id;\n          }}\n        />\n      ) : (\n        <Button onClick={handleAddFileColumn}>Add file column</Button>\n      )}\n    </div>\n  );\n};"},"Pagination":{"componentName":"Pagination","sourceFile":"../../examples/Pagination/Pagination.jsx","codeSample":"\nconst monday = mondaySdk();\n\nfunction itemsReducer(items, action) {\n  if (action.type === 'added') {\n    return [...items, ...action.itemsToAdd];\n  }\n}\n\nconst Pagination = () => {\n  const appContext = useAppContext();\n  const [filterState, setFilterState] = useState()\n  const [items, dispatch] = useReducer(itemsReducer, [])\n  let currentBoard = appContext?.data?.boardIds[0] ?? null;\n\n  useEffect(() => {\n    if (currentBoard) {\n      async function getItemsWithPagination() {\n        const boardIds = currentBoard;\n        var page = 1;\n\n        // get first page of items\n        var items_page = await monday.api(`\n          query ($boardIds:[ID!]){\n            boards (ids:$boardIds) { \n              items_page (limit:1) {\n                cursor\n                items {\n                  name\n                  id\n                }\n              } \n            } \n          }`, { variables: { boardIds } });\n\n        // dispatch changes to items state\n        let itemsToAdd = items_page.data.boards[0].items_page.items;\n        dispatch({\n          type: 'added',\n          itemsToAdd\n        })\n\n        // set cursor & increment page\n        var cursor = items_page.data.boards[0].items_page.cursor\n        page += 1;\n\n        // if cursor exists, retrieve next page\n        while (cursor) {\n          items_page = await monday.api(`\n            query ($boardIds:[ID!], $cursor:String){\n              boards (ids:$boardIds) { \n                items_page (limit:1, cursor:$cursor) {\n                  cursor\n                  items {\n                    name\n                    id\n                  }\n                } \n              } \n            }`, { variables: { boardIds, cursor } });\n          let itemsToAdd = items_page.data.boards[0].items_page.items;\n          dispatch({\n            type: 'added',\n            itemsToAdd\n          })\n          page += 1;\n          cursor = items_page.data.boards[0].items_page.cursor;\n        }\n\n      }\n      try {\n        getItemsWithPagination();\n      } catch (err) {\n        console.error(err);\n      }\n    }\n  }, [currentBoard])\n\n  return (\n    <div className=\"get-items-container feature-container\">\n      <RenderItems\n        itemsData={items}\n      />\n    </div>\n  );\n};"}}